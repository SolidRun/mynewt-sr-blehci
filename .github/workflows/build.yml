name: build

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  prepare_container:
    runs-on: self-hosted
    outputs:
      uid: ${{ steps.uid_step.outputs.userid }}
      gid: ${{ steps.uid_step.outputs.groupid }}
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      - name: Get user id/group
        id: uid_step
        run: |
          echo "userid=$(id -u)" >> "$GITHUB_OUTPUT"
          echo "groupid=$(id -g)" >> "$GITHUB_OUTPUT"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-config: /etc/docker/cibuilder.toml

      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ciserver.ci:5000
          username: ${{ secrets.CI_CACHE_REGISTRY_LOGIN }}
          password: ${{ secrets.CI_CACHE_REGISTRY_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ciserver.ci:5000/${{ github.repository_id }}:latest
          cache-from: type=registry,ref=ciserver.ci:5000/${{ github.repository_id }}:cache
          cache-to: type=registry,ref=ciserver.ci:5000/${{ github.repository_id }}:cache,mode=max
          file: docker/Dockerfile
          build-args: |
            USER_ID=${{ steps.uid_step.outputs.userid }}
            GROUP_ID=${{ steps.uid_step.outputs.groupid }}

  build_project:
    needs: prepare_container
    runs-on: self-hosted
    timeout-minutes: 30
    container:
        image: ciserver.ci:5000/${{ github.repository_id }}:latest
        credentials:
            username: ${{ secrets.CI_CACHE_REGISTRY_LOGIN }}
            password: ${{ secrets.CI_CACHE_REGISTRY_PASSWORD }}
        options: --user "${{ needs.prepare_container.outputs.uid }}:${{ needs.prepare_container.outputs.gid }}"
    outputs:
      build_tag: ${{ steps.tag_step.outputs.build_tag }}
    steps:
      - name: Checkout pull-request
        uses: actions/checkout@v4

      - name: Fetch cache from server
        uses: tespkg/actions-cache/restore@v1
        with:
          endpoint: ciserver.ci
          port: 9000
          insecure: true
          accessKey: ${{ secrets.CI_CACHE_MINIO_ACCESS }}
          secretKey: ${{ secrets.CI_CACHE_MINIO_SECRET }}
          bucket: cicache
          use-fallback: false
          key: ${{ github.repository }}
          path: |
            repos

      - name: Download Project Sources
        run: |
          newt upgrade -f

      - name: Update cache on the server
        if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
        uses: tespkg/actions-cache/save@v1
        with:
          endpoint: ciserver.ci
          port: 9000
          insecure: true
          accessKey: ${{ secrets.CI_CACHE_MINIO_ACCESS }}
          secretKey: ${{ secrets.CI_CACHE_MINIO_SECRET }}
          bucket: cicache
          use-fallback: false
          key: ${{ github.repository }}
          path: |
            repos

      - name: Get build tag
        id: tag_step
        run: |
          build_tag=$(date +%Y-%m-%d)_$(git rev-parse --short HEAD)
          echo "build_tag=$build_tag" >> "$GITHUB_OUTPUT"

      - name: Build
        shell: bash
        run: |
            mkdir deploy
            for target in {imx8mqsom-nina-b1,ssn6-nina-b111,ssn6-nina-b301,ssn6-fwm7blz22}; do
              newt build ${target}_boot
              cp -v bin/targets/${target}_boot/app/@mcuboot/boot/mynewt/mynewt.elf.bin deploy/${target}_boot.elf.bin
              newt build ${target}_blehci
              newt create-image ${target}_blehci 0.0.0.0
              cp -v bin/targets/${target}_blehci/app/@apache-mynewt-nimble/apps/blehci/blehci.img deploy/${target}_nimble.img
            done

      - name: Deploy to the local minio storage
        uses: yakubique/minio-upload@v1.1.3
        with:
          endpoint: http://ciserver.ci:9000
          insecure: true
          access_key: ${{ secrets.CI_CACHE_MINIO_ACCESS }}
          secret_key: ${{ secrets.CI_CACHE_MINIO_SECRET }}
          bucket: cipublish
          source: ./deploy
          target: "/${{ github.repository_id }}/${{ steps.tag_step.outputs.build_tag }}"
          recursive: true

  publish_artifacts:
    needs: build_project
    runs-on: self-hosted
    if: github.event_name == 'push'
    steps:
      - name: Download an artifacts from MinIO
        uses: yakubique/minio-download@v1.1.1
        with:
          endpoint: http://ciserver.ci:9000
          insecure: true
          access_key: ${{ secrets.CI_CACHE_MINIO_ACCESS }}
          secret_key: ${{ secrets.CI_CACHE_MINIO_SECRET }}
          bucket: cipublish
          source: "/${{ github.repository_id }}/${{ needs.build_images.outputs.build_tag }}/"
          target: "."
          recursive: true

      - name: Upload to S3
        uses: shallwefootball/upload-s3-action@v1.3.3
        with:
          aws_key_id: ${{ secrets.IMAGES_S3_ACCESS }}
          aws_secret_access_key: ${{ secrets.IMAGES_S3_SECRET }}
          aws_bucket: ${{ secrets.IMAGES_S3_BUCKET }}
          endpoint: ${{ secrets.IMAGES_S3_HOST }}
          source_dir: deploy
          destination_dir: SolidSense/mynewt-sr-blehci/${{ needs.build_images.outputs.build_tag }}
